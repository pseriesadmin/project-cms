---
alwaysApply: true
---

# CSPM (CrazyShot Project Manager) 통합 개발 가이드라인

## 📋 문서 개요

### 목적
- **프로젝트**: CrazyShot Project Manager (CSPM)
- **핵심 목표**: 장비 및 프로젝트 관리를 위한 통합 대시보드 시스템 개발

### 문서 메타데이터
- **버전**: v3.0.0
- **최종 업데이트**: 2024년 12월
- **담당자**: 크레이지샷 개발팀

## 🏗️ 시스템 아키텍처 및 기술 전략

### 1. 아키텍처 원칙
- **모듈성**: 느슨하게 결합된 독립 모듈 설계
- **확장성**: 미래 기능 추가를 고려한 유연한 구조
- **유지보수성**: 명확한 관심사 분리 및 코드 재사용성 극대화

### 2. 기술 스택

#### 2.1 프론트엔드 기술
- **프레임워크**: React 18.2.0 + TypeScript
- **상태 관리**: React Hooks (useState, useReducer)
- **스타일링**: TailwindCSS
- **빌드 도구**: Vite
- **개발 환경**: Node.js v20.19.0 이상

#### 2.2 백엔드 및 인프라
- **API**: RESTful JSON API
- **데이터베이스**: PostgreSQL (Supabase)
- **인증**: JWT 토큰 기반
- **호스팅**: Vercel
- **CI/CD**: GitHub Actions

### 3. 시스템 모듈 구조

#### 3.1 모듈 정의
- **장비 관리 모듈**
  - 자산 추적
  - 재고 관리
  - 대여/반납 워크플로우

- **프로젝트 관리 모듈**
  - 프로젝트 라이프사이클 관리
  - 작업 할당 및 진행 상황 추적
  - 리소스 최적화

- **인증/인가 모듈**
  - 사용자 인증
  - 역할 기반 접근 제어 (RBAC)
  - 보안 정책 관리

#### 3.2 모듈 간 상호작용
- **내부 통신**: 이벤트 기반 메시징 (RxJS)
- **외부 통신**: RESTful API, GraphQL
- **실시간 업데이트**: WebSocket

## 🎨 UI/UX 디자인 가이드

### 4. 디자인 시스템

#### 4.1 브랜드 아이덴티티
- **핵심 가치**: 단순성, 효율성, 직관성
- **타겟 사용자**: 전문 장비 관리자, 프로젝트 매니저

#### 4.2 색상 팔레트
```css
:root {
  --color-primary: #CF0000;     /* Crazy Red - 주요 액션 */
  --color-secondary: #1D183E;   /* Crazy Dark Blue - 헤더, 네비게이션 */
  --color-accent: #C1BBEC;      /* Crazy Lavender - 보조 배경 */
}
```

#### 4.3 타이포그래피
```css
:root {
  --font-family: 'Inter', sans-serif;
  --font-size-base: 16px;
  --font-weight-regular: 400;
  --font-weight-bold: 700;
}
```

#### 4.4 인터랙션 디자인
- **애니메이션 원칙**
  - 마이크로 인터랙션: 100-200ms
  - 주요 전환: 300-500ms
- **상호작용 상태**
  ```css
  .btn {
    transition: all 200ms ease-in-out;
  }
  .btn:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  }
  ```

## 🔧 개발 표준 및 코딩 가이드라인

### 5. 코딩 표준

#### 5.1 TypeScript 규칙
```typescript
// ✅ 타입 안전성 보장
interface EquipmentProps {
  id: string;
  name: string;
  status: 'AVAILABLE' | 'IN_USE' | 'MAINTENANCE';
  onStatusChange: (id: string, newStatus: string) => void;
}
```

#### 5.2 컴포넌트 설계
- 함수형 컴포넌트 사용
- Props 타입 정의 필수
- React.memo 성능 최적화
- 복잡한 로직은 커스텀 훅으로 분리

#### 5.3 상태 관리
```typescript
// 상태 관리 모범 사례
const [equipment, setEquipment] = useState<Equipment[]>([]);
const [loading, setLoading] = useState(false);

const updateEquipmentStatus = useCallback((id: string, newStatus: string) => {
  setEquipment(prev => 
    prev.map(item => 
      item.id === id ? { ...item, status: newStatus } : item
    )
  );
}, []);
```

## 🔒 보안 및 데이터 관리

### 6. 보안 정책

#### 6.1 데이터 보호
- 최소 권한 원칙 적용
- 데이터 암호화 (AES-256)
- GDPR, CCPA 준수

#### 6.2 인증 메커니즘
```typescript
interface AuthConfig {
  tokenExpiration: number;
  refreshTokenWindow: number;
  multiFactorEnabled: boolean;
}

const defaultAuthConfig: AuthConfig = {
  tokenExpiration: 3600,        // 1시간
  refreshTokenWindow: 86400,    // 24시간
  multiFactorEnabled: true
};
```

## 📦 데이터 백업 및 마이그레이션

### 7. 데이터 관리 전략

#### 7.1 백업 정책
- **로컬 백업**: 일일, 주간
- **클라우드 백업**: AWS S3, 암호화 적용
- **보존 정책**: 
  - 최근 30일: 일일 백업
  - 최근 3개월: 주간 백업

#### 7.2 데이터 내보내기
```typescript
interface ExportOptions {
  format: 'csv' | 'xlsx' | 'json';
  includeMetadata: boolean;
  anonymize: boolean;
}

function exportEquipmentData(
  data: Equipment[], 
  options: ExportOptions = {
    format: 'xlsx',
    includeMetadata: true,
    anonymize: true
  }
) {
  // 내보내기 로직
}
```

## 🚀 성능 및 확장 전략

### 8. 성능 최적화

#### 8.1 프론트엔드 최적화
- 코드 분할 (React.lazy)
- 메모이제이션 (useMemo, useCallback)
- 이미지 최적화 (WebP, 지연 로딩)

#### 8.2 백엔드 최적화
- 쿼리 캐싱
- 연결 풀 관리
- 비동기 처리 최적화

## 🔬 미래 기술 로드맵

### 9. 기술 진화 계획

#### 9.1 단기 로드맵 (2024)
- Q1: 시스템 안정화
- Q2: 마이크로서비스 전환 준비
- Q3: AI 예측 분석 도입
- Q4: 머신러닝 워크플로우 최적화

#### 9.2 장기 혁신 전략
- 엣지 컴퓨팅 통합
- 블록체인 기반 자산 추적
- AR/VR 장비 관리 인터페이스
- 양자 컴퓨팅 최적화 알고리즘 탐색

## 📞 지원 및 문의

### 10. 개발팀 연락처
- **기술 지원**: 개발팀 리드
- **디자인 문의**: UI/UX 팀
- **보안 검토**: 보안 전문가 팀

### 11. 긴급 대응 가이드
- 빌드 실패 시 대응 절차
- 개발 서버 문제 해결 가이드
- TypeScript 오류 대응 방법

---

**문서 버전**: v3.0.0
**최종 업데이트**: 2024년 12월
**담당자**: 크레이지샷 개발팀# CSPM (CrazyShot Project Manager) 통합 개발 가이드라인

## 📋 문서 개요

### 목적
- **프로젝트**: CrazyShot Project Manager (CSPM)
- **핵심 목표**: 장비 및 프로젝트 관리를 위한 통합 대시보드 시스템 개발

### 문서 메타데이터
- **버전**: v3.0.0
- **최종 업데이트**: 2024년 12월
- **담당자**: 크레이지샷 개발팀

## 🏗️ 시스템 아키텍처 및 기술 전략

### 1. 아키텍처 원칙
- **모듈성**: 느슨하게 결합된 독립 모듈 설계
- **확장성**: 미래 기능 추가를 고려한 유연한 구조
- **유지보수성**: 명확한 관심사 분리 및 코드 재사용성 극대화

### 2. 기술 스택

#### 2.1 프론트엔드 기술
- **프레임워크**: React 18.2.0 + TypeScript
- **상태 관리**: React Hooks (useState, useReducer)
- **스타일링**: TailwindCSS
- **빌드 도구**: Vite
- **개발 환경**: Node.js v20.19.0 이상

#### 2.2 백엔드 및 인프라
- **API**: RESTful JSON API
- **데이터베이스**: PostgreSQL (Supabase)
- **인증**: JWT 토큰 기반
- **호스팅**: Vercel
- **CI/CD**: GitHub Actions

### 3. 시스템 모듈 구조

#### 3.1 모듈 정의
- **장비 관리 모듈**
  - 자산 추적
  - 재고 관리
  - 대여/반납 워크플로우

- **프로젝트 관리 모듈**
  - 프로젝트 라이프사이클 관리
  - 작업 할당 및 진행 상황 추적
  - 리소스 최적화

- **인증/인가 모듈**
  - 사용자 인증
  - 역할 기반 접근 제어 (RBAC)
  - 보안 정책 관리

#### 3.2 모듈 간 상호작용
- **내부 통신**: 이벤트 기반 메시징 (RxJS)
- **외부 통신**: RESTful API, GraphQL
- **실시간 업데이트**: WebSocket

## 🎨 UI/UX 디자인 가이드

### 4. 디자인 시스템

#### 4.1 브랜드 아이덴티티
- **핵심 가치**: 단순성, 효율성, 직관성
- **타겟 사용자**: 전문 장비 관리자, 프로젝트 매니저

#### 4.2 색상 팔레트
```css
:root {
  --color-primary: #CF0000;     /* Crazy Red - 주요 액션 */
  --color-secondary: #1D183E;   /* Crazy Dark Blue - 헤더, 네비게이션 */
  --color-accent: #C1BBEC;      /* Crazy Lavender - 보조 배경 */
}
```

#### 4.3 타이포그래피
```css
:root {
  --font-family: 'Inter', sans-serif;
  --font-size-base: 16px;
  --font-weight-regular: 400;
  --font-weight-bold: 700;
}
```

#### 4.4 인터랙션 디자인
- **애니메이션 원칙**
  - 마이크로 인터랙션: 100-200ms
  - 주요 전환: 300-500ms
- **상호작용 상태**
  ```css
  .btn {
    transition: all 200ms ease-in-out;
  }
  .btn:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  }
  ```

## 🔧 개발 표준 및 코딩 가이드라인

### 5. 코딩 표준

#### 5.1 TypeScript 규칙
```typescript
// ✅ 타입 안전성 보장
interface EquipmentProps {
  id: string;
  name: string;
  status: 'AVAILABLE' | 'IN_USE' | 'MAINTENANCE';
  onStatusChange: (id: string, newStatus: string) => void;
}
```

#### 5.2 컴포넌트 설계
- 함수형 컴포넌트 사용
- Props 타입 정의 필수
- React.memo 성능 최적화
- 복잡한 로직은 커스텀 훅으로 분리

#### 5.3 상태 관리
```typescript
// 상태 관리 모범 사례
const [equipment, setEquipment] = useState<Equipment[]>([]);
const [loading, setLoading] = useState(false);

const updateEquipmentStatus = useCallback((id: string, newStatus: string) => {
  setEquipment(prev => 
    prev.map(item => 
      item.id === id ? { ...item, status: newStatus } : item
    )
  );
}, []);
```

## 🔒 보안 및 데이터 관리

### 6. 보안 정책

#### 6.1 데이터 보호
- 최소 권한 원칙 적용
- 데이터 암호화 (AES-256)
- GDPR, CCPA 준수

#### 6.2 인증 메커니즘
```typescript
interface AuthConfig {
  tokenExpiration: number;
  refreshTokenWindow: number;
  multiFactorEnabled: boolean;
}

const defaultAuthConfig: AuthConfig = {
  tokenExpiration: 3600,        // 1시간
  refreshTokenWindow: 86400,    // 24시간
  multiFactorEnabled: true
};
```

## 📦 데이터 백업 및 마이그레이션

### 7. 데이터 관리 전략

#### 7.1 백업 정책
- **로컬 백업**: 일일, 주간
- **클라우드 백업**: AWS S3, 암호화 적용
- **보존 정책**: 
  - 최근 30일: 일일 백업
  - 최근 3개월: 주간 백업

#### 7.2 데이터 내보내기
```typescript
interface ExportOptions {
  format: 'csv' | 'xlsx' | 'json';
  includeMetadata: boolean;
  anonymize: boolean;
}

function exportEquipmentData(
  data: Equipment[], 
  options: ExportOptions = {
    format: 'xlsx',
    includeMetadata: true,
    anonymize: true
  }
) {
  // 내보내기 로직
}
```

## 🚀 성능 및 확장 전략

### 8. 성능 최적화

#### 8.1 프론트엔드 최적화
- 코드 분할 (React.lazy)
- 메모이제이션 (useMemo, useCallback)
- 이미지 최적화 (WebP, 지연 로딩)

#### 8.2 백엔드 최적화
- 쿼리 캐싱
- 연결 풀 관리
- 비동기 처리 최적화

## 🔬 미래 기술 로드맵

### 9. 기술 진화 계획

#### 9.1 단기 로드맵 (2024)
- Q1: 시스템 안정화
- Q2: 마이크로서비스 전환 준비
- Q3: AI 예측 분석 도입
- Q4: 머신러닝 워크플로우 최적화

#### 9.2 장기 혁신 전략
- 엣지 컴퓨팅 통합
- 블록체인 기반 자산 추적
- AR/VR 장비 관리 인터페이스
- 양자 컴퓨팅 최적화 알고리즘 탐색

## 📞 지원 및 문의

### 10. 개발팀 연락처
- **기술 지원**: 개발팀 리드
- **디자인 문의**: UI/UX 팀
- **보안 검토**: 보안 전문가 팀

### 11. 긴급 대응 가이드
- 빌드 실패 시 대응 절차
- 개발 서버 문제 해결 가이드
- TypeScript 오류 대응 방법

---

**문서 버전**: v3.0.0
**최종 업데이트**: 2024년 12월
**담당자**: 크레이지샷 개발팀