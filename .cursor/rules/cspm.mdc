---
alwaysApply: true
---

# CSPM (CrazyShot Project Manager) 통합 개발 가이드라인

## 📋 문서 개요

### 목적
- **프로젝트**: CrazyShot Project Manager (CSPM)
- **핵심 목표**: 장비 및 프로젝트 관리를 위한 통합 대시보드 시스템 개발

### 문서 메타데이터
- **버전**: v3.0.0
- **최종 업데이트**: 2024년 12월
- **담당자**: 크레이지샷 개발팀

## 🏗️ 시스템 아키텍처 및 기술 전략

### 1. 아키텍처 원칙
- **모듈성**: 느슨하게 결합된 독립 모듈 설계
- **확장성**: 미래 기능 추가를 고려한 유연한 구조
- **유지보수성**: 명확한 관심사 분리 및 코드 재사용성 극대화

### 2. 기술 스택

#### 2.1 프론트엔드 기술
- **프레임워크**: React 18.2.0 + TypeScript
- **상태 관리**: React Hooks (useState, useReducer)
- **스타일링**: TailwindCSS
- **빌드 도구**: Vite
- **개발 환경**: Node.js v20.19.0 이상

#### 2.2 백엔드 및 인프라
- **API**: RESTful JSON API
- **데이터베이스**: PostgreSQL (Supabase)
- **인증**: JWT 토큰 기반
- **호스팅**: Vercel
- **CI/CD**: GitHub Actions

### 3. 시스템 모듈 구조

#### 3.1 모듈 정의
- **장비 관리 모듈**
  - 자산 추적
  - 재고 관리
  - 대여/반납 워크플로우

- **프로젝트 관리 모듈**
  - 프로젝트 라이프사이클 관리
  - 작업 할당 및 진행 상황 추적
  - 리소스 최적화

- **인증/인가 모듈**
  - 사용자 인증
  - 역할 기반 접근 제어 (RBAC)
  - 보안 정책 관리

#### 3.2 모듈 간 상호작용
- **내부 통신**: 이벤트 기반 메시징 (RxJS)
- **외부 통신**: RESTful API, GraphQL
- **실시간 업데이트**: WebSocket

## 🎨 UI/UX 디자인 가이드

### 4. 디자인 시스템

#### 4.1 브랜드 아이덴티티
- **핵심 가치**: 단순성, 효율성, 직관성
- **타겟 사용자**: 전문 장비 관리자, 프로젝트 매니저

#### 4.2 색상 팔레트
```css
:root {
  --color-primary: #CF0000;     /* Crazy Red - 주요 액션 */
  --color-secondary: #1D183E;   /* Crazy Dark Blue - 헤더, 네비게이션 */
  --color-accent: #C1BBEC;      /* Crazy Lavender - 보조 배경 */
}
```

#### 4.3 타이포그래피
```css
:root {
  --font-family: 'Inter', sans-serif;
  --font-size-base: 16px;
  --font-weight-regular: 400;
  --font-weight-bold: 700;
}
```

#### 4.4 인터랙션 디자인
- **애니메이션 원칙**
  - 마이크로 인터랙션: 100-200ms
  - 주요 전환: 300-500ms
- **상호작용 상태**
  ```css
  .btn {
    transition: all 200ms ease-in-out;
  }
  .btn:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  }
  ```

## 🔧 개발 표준 및 코딩 가이드라인

### 5. 코딩 표준

#### 5.1 TypeScript 규칙
```typescript
// ✅ 타입 안전성 보장
interface EquipmentProps {
  id: string;
  name: string;
  status: 'AVAILABLE' | 'IN_USE' | 'MAINTENANCE';
  onStatusChange: (id: string, newStatus: string) => void;
}
```

#### 5.2 컴포넌트 설계
- 함수형 컴포넌트 사용
- Props 타입 정의 필수
- React.memo 성능 최적화
- 복잡한 로직은 커스텀 훅으로 분리

#### 5.3 상태 관리
```typescript
// 상태 관리 모범 사례
const [equipment, setEquipment] = useState<Equipment[]>([]);
const [loading, setLoading] = useState(false);

const updateEquipmentStatus = useCallback((id: string, newStatus: string) => {
  setEquipment(prev => 
    prev.map(item => 
      item.id === id ? { ...item, status: newStatus } : item
    )
  );
}, []);
```

## 🔒 보안 및 데이터 관리

### 6. 보안 정책

#### 6.1 데이터 보호
- 최소 권한 원칙 적용
- 데이터 암호화 (AES-256)
- GDPR, CCPA 준수

#### 6.2 인증 메커니즘
```typescript
interface AuthConfig {
  tokenExpiration: number;
  refreshTokenWindow: number;
  multiFactorEnabled: boolean;
}

const defaultAuthConfig: AuthConfig = {
  tokenExpiration: 3600,        // 1시간
  refreshTokenWindow: 86400,    // 24시간
  multiFactorEnabled: true
};
```

## 📦 데이터 백업 및 마이그레이션

### 7. 데이터 관리 전략

#### 7.1 백업 정책
- **로컬 백업**: 일일, 주간
- **클라우드 백업**: AWS S3, 암호화 적용
- **보존 정책**: 
  - 최근 30일: 일일 백업
  - 최근 3개월: 주간 백업

#### 7.2 데이터 내보내기
```typescript
interface ExportOptions {
  format: 'csv' | 'xlsx' | 'json';
  includeMetadata: boolean;
  anonymize: boolean;
}

function exportEquipmentData(
  data: Equipment[], 
  options: ExportOptions = {
    format: 'xlsx',
    includeMetadata: true,
    anonymize: true
  }
) {
  // 내보내기 로직
}
```

## 🚀 성능 및 확장 전략

### 8. 성능 최적화

#### 8.1 프론트엔드 최적화
- 코드 분할 (React.lazy)
- 메모이제이션 (useMemo, useCallback)
- 이미지 최적화 (WebP, 지연 로딩)

#### 8.2 백엔드 최적화
- 쿼리 캐싱
- 연결 풀 관리
- 비동기 처리 최적화

## 🔬 미래 기술 로드맵

### 9. 기술 진화 계획

#### 9.1 단기 로드맵 (2024)
- Q1: 시스템 안정화
- Q2: 마이크로서비스 전환 준비
- Q3: AI 예측 분석 도입
- Q4: 머신러닝 워크플로우 최적화

#### 9.2 장기 혁신 전략
- 엣지 컴퓨팅 통합
- 블록체인 기반 자산 추적
- AR/VR 장비 관리 인터페이스
- 양자 컴퓨팅 최적화 알고리즘 탐색

## 📞 지원 및 문의

### 10. 개발팀 연락처
- **기술 지원**: 개발팀 리드
- **디자인 문의**: UI/UX 팀
- **보안 검토**: 보안 전문가 팀

### 11. 긴급 대응 가이드
- 빌드 실패 시 대응 절차
- 개발 서버 문제 해결 가이드
- TypeScript 오류 대응 방법

## 🔒 절대 규칙 및 정책 가이드라인

### 12. 개발 및 유지보수 절대 원칙

#### 12.1 코드 수정 및 리팩토링 절대 규칙
- **최소 침입 원칙**: 
  - 수정 대상과 직접적으로 연관된 코드만 변경
  - 무관한 파일, 컴포넌트, 기능에 대한 수정 금지
- **코드 구조 보존**:
  - 기존 코드의 구문 스타일, 로직 구조 최대한 유지
  - 불가피한 변경 시 최소한의 코드로 구현

#### 12.2 오류 대응 절대 원칙
- **오류 분류 및 대응**:
  1. **사용자 취소 오류**: 
     - 사용자 의도적 취소(AbortError, NotAllowedError)는 아무런 동작 없이 종료
     - 실제 시스템 오류와 명확히 구분
  2. **시스템 오류**:
     - 명확한 로깅 및 사용자 피드백
     - 폴백(fallback) 메커니즘 구현
     - 최소한의 시스템 상태 유지

#### 12.3 기능 구현 절대 가이드라인
- **기능 동일성 원칙**:
  - 유사한 기능은 완전히 동일한 로직과 UX 보장
  - 다른 탭/모듈 간 기능 일관성 유지
- **최소 코드 원칙**:
  - 기능 구현 시 최소한의 코드 구문 사용
  - 불필요한 복잡성 배제
  - 가독성과 유지보수성 최우선

#### 12.4 보안 및 사용자 경험 원칙
- **사용자 선택 존중**:
  - 사용자의 명시적 동의 없는 자동 저장/다운로드 금지
  - 취소 시 어떠한 부수 효과도 발생하지 않도록 보장
- **컨텍스트 보존**:
  - 오류 발생 시 시스템 상태 원복
  - 사용자 데이터 무결성 보장

#### 12.5 디버깅 및 로깅 원칙
- **상세 로깅**:
  - 모든 중요 이벤트 및 오류에 대해 상세 로그 기록
  - 개발자가 문제 원인을 즉시 파악할 수 있는 수준의 로그
- **콘솔 로깅 가이드라인**:
  - 개발 환경에서만 상세 로그 출력
  - 프로덕션 환경에서는 최소한의 로깅
  - 민감한 정보 절대 노출 금지

#### 12.6 API 및 파일 시스템 접근 원칙
- **API 기능성 검증**:
  - 브라우저 API 지원 여부 사전 확인
  - 안전한 컨텍스트(HTTPS) 에서만 고급 API 사용
- **폴백 메커니즘**:
  - 모든 고급 API에 대해 안전한 폴백 메커니즘 구현
  - 사용자 경험 저하 최소화

#### 12.7 타입스크립트 안전성 원칙
- **타입 안전성 절대 원칙**:
  - `any` 타입 사용 금지
  - 모든 함수와 변수에 명시적 타입 지정
  - 제네릭 타입을 활용한 유연한 타입 정의
- **타입 가드 및 타입 좁히기**:
  - 오류 처리 시 명확한 타입 가드 사용
  - 런타임 타입 체크 최소화

#### 12.8 성능 및 최적화 원칙
- **최소 성능 저하**:
  - 새로운 기능 추가 시 성능 영향 최소화
  - 불필요한 렌더링 및 계산 방지
- **메모이제이션 및 최적화**:
  - `useMemo`, `useCallback` 적극 활용
  - 불필요한 재계산 방지

#### 12.9 변경 관리 원칙
- **변경 추적**:
  - 모든 중요 변경사항 문서화
  - 버전 관리 시스템을 통한 변경 이력 관리
- **리뷰 및 승인**:
  - 모든 주요 변경은 코드 리뷰 필수
  - 최소 2인 이상의 승인 필요

#### 12.10 긴급 대응 원칙
- **빠른 롤백**:
  - 심각한 버그 발생 시 즉시 이전 안정 버전으로 롤백
  - 최소한의 시스템 중단
- **사용자 피드백**:
  - 오류 발생 시 명확하고 친절한 사용자 메시지
  - 기술적 세부사항 노출 금지

---

**문서 버전**: v3.1.0
**최종 업데이트**: 2024년 12월
**담당자**: 크레이지샷 개발팀