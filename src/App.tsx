import React from 'react';
import { useState, useCallback, useRef, useMemo, useEffect } from 'react';
import { ProjectPhaseCard } from './components/ProjectPhaseCard';
import { initialData } from './data/initialData';
import type { ProjectPhase, Task, ProjectData, ChecklistItem, PerformanceRecord } from './types';
import { CrazyshotLogo, DownloadIcon, UploadIcon, PlusIcon, SaveIcon, CloudUploadIcon, CloudDownloadIcon } from './components/icons';
import { ConfirmationModal } from './components/ConfirmationModal';
import { ChangeLogDisplay } from './components/ChangeLogDisplay';
import { LogModal } from './components/LogModal';
import { ProductDashboard } from './components/ProductDashboard';
// import { useActiveUsers } from './hooks/useActiveUsers'; // ÏûÑÏãú Ï£ºÏÑù Ï≤òÎ¶¨
import { useProjectSync } from './hooks/useProjectSync';
import { TopSnackbar, BottomSnackbar } from './components/common/TopSnackbar';
import { useUserSession } from './hooks/useRealtimeBackup';
import { useActivityOptimizer } from './hooks/useActivityOptimizer';
import { advancedFileSystemBackup } from './utils/backupUtils';

type TabId = 'workflow' | 'dashboard';

const TabButton: React.FC<{
  tabId: TabId;
  title: string;
  activeTab: TabId;
  setActiveTab: (tabId: TabId) => void;
}> = ({ tabId, title, activeTab, setActiveTab }) => (
  <button
    onClick={() => setActiveTab(tabId)}
    className={`px-4 sm:px-6 py-3 text-sm font-bold transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-crazy-bright-blue ${
      activeTab === tabId
        ? 'text-crazy-bright-blue border-b-2 border-crazy-bright-blue'
        : 'text-slate-500 hover:text-crazy-blue hover:bg-slate-100 rounded-t-lg'
    }`}
  >
    {title}
  </button>
);

const App: React.FC = () => {
  const [taskToDelete, setTaskToDelete] = useState<{ phaseId: string; taskId: string } | null>(null);
  const [phaseToDelete, setPhaseToDelete] = useState<string | null>(null);
  const [isLogModalOpen, setIsLogModalOpen] = useState(false);
  const [dataToRestore, setDataToRestore] = useState<ProjectData | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  // ÌÉ≠ ÏÉÅÌÉú Î≥µÏõê Î∞è Ï†ÄÏû•
  const getInitialTab = (): TabId => {
    try {
      const savedTab = localStorage.getItem('activeTab');
      return (savedTab as TabId) || 'workflow';
    } catch {
      return 'workflow';
    }
  };

  const [activeTab, setActiveTab] = useState<TabId>(getInitialTab);

  // ÌÉ≠ Î≥ÄÍ≤Ω Ïãú localStorageÏóê Ï†ÄÏû•
  const handleTabChange = (tabId: TabId) => {
    setActiveTab(tabId);
    localStorage.setItem('activeTab', tabId);
  };
  const [showUserSnackbar, setShowUserSnackbar] = useState(false);
  const [showActivitySnackbar, setShowActivitySnackbar] = useState(false);

  // Ïã§ÏãúÍ∞Ñ ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò Í¥ÄÎ¶¨
  const { 
    activeUsers, 
    recentActions, 
    notifyUserAction, 
    hasMultipleUsers 
  } = useUserSession();

  // Ìä∏ÎûòÌîΩ ÏµúÏ†ÅÌôî: ÏÇ¨Ïö©Ïûê ÌôúÎèô Í∞êÏßÄ
  const { isActive } = useActivityOptimizer({
    inactivityThreshold: 5 * 60 * 1000, // 5Î∂Ñ ÎπÑÌôúÏÑ±
    activeCheckInterval: 60000 // 1Î∂ÑÎßàÎã§ ÌôïÏù∏
  });

  // ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò ÏÉÅÌÉú Í∏∞Î≥∏ Í¥ÄÎ¶¨
  const status = { 
    hasMultipleUsers, 
    activeUserCount: activeUsers.count 
  };

  // Ìñ•ÏÉÅÎêú ÎèôÍ∏∞Ìôî Ï†ÑÎûµ: Îã§Ï§ë ÏÇ¨Ïö©Ïûê ÌôòÍ≤ΩÏóê Îî∞Îùº ÎèôÏ†Å ÏÑ§Ï†ï
  
  // ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî (Ìñ•ÏÉÅÎêú ÎèôÍ∏∞Ìôî Ï†ÑÎûµ Ï†ÅÏö©)
  const {
    projectData,
    isSyncing, // Ï¥àÍ∏∞ Î≥µÏõê Î°úÎî© ÏÉÅÌÉú 
    updateProjectData, 
    lastSyncTime,
    isOnline,
    backupState,
    cloudBackup,
    cloudRestore,
    currentVersion,
    triggerSmartSync
  } = useProjectSync(initialData, { 
    pauseSync: !isActive, // ÎπÑÌôúÏÑ± ÏÉÅÌÉúÏóêÏÑú ÎèôÍ∏∞Ìôî ÏùºÏãú Ï§ëÎã®
    syncStrategy: hasMultipleUsers ? 'immediate' : 'debounce' // ÎèôÏ†Å ÎèôÍ∏∞Ìôî Ï†ÑÎûµ
  });
  
  // ÏûêÎèô Î≥µÏõê ÎèôÍ∏∞Ìôî ÏÉÅÌÉú ÌôïÏù∏ (ÏûêÎèô Î∞±ÏóÖÏùÄ ÎπÑÌôúÏÑ±Ìôî)
  const isAutoSyncWorking = isOnline; // ÏûêÎèô Î≥µÏõê ÎèôÍ∏∞Ìôî ÌôúÏÑ±Ìôî ÏÉÅÌÉú
  const shouldShowCloudButtons = true; // ÏàòÎèô Î∞±ÏóÖ/Î≥µÏõê Î≤ÑÌäº Ìï≠ÏÉÅ ÌëúÏãú

  // ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÎäî Î≥ÄÏàò Ï∞∏Ï°∞ (lint Í≤ΩÍ≥† Ìï¥Í≤∞)
  useEffect(() => {
    if (lastSyncTime) {
      // ÎßàÏßÄÎßâ ÎèôÍ∏∞Ìôî ÏãúÍ∞Ñ Ï∂îÏ†Å
    }
  }, [lastSyncTime]);


  // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Î∞è ÏßÑÌñâÎ•† Í≥ÑÏÇ∞ Ìï®Ïàò Î≥µÏõê
  const getTimestamp = () => new Date().toLocaleString('ko-KR', {
    year: 'numeric', month: '2-digit', day: '2-digit',
    hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false
  });

  const { totalCheckpoints, completedCheckpoints } = useMemo(() => {
    let total = 0;
    let completed = 0;
    projectData.projectPhases.forEach((phase: ProjectPhase) => {
      phase.tasks.forEach((task: Task) => {
        total += task.checkpoints.length;
        completed += task.checkpoints.filter((c: ChecklistItem) => c.completed).length;
      });
    });
    return { totalCheckpoints: total, completedCheckpoints: completed };
  }, [projectData.projectPhases]);

  const totalProgress = totalCheckpoints > 0 ? Math.round((completedCheckpoints / totalCheckpoints) * 100) : 0;

  // ÎèÑÎ©îÏù∏ ÏßÑÏûÖ Ïãú ÏµúÏ¥à Ìïú Î≤à Ï∫êÏãú Î¨¥Ïãú ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê ÏãúÎèÑ
  useEffect(() => {
    let isInitialLoad = true;
    
    if (isInitialLoad) {
      // console.log('üåê [App] ÎèÑÎ©îÏù∏ Ï≤´ ÏßÑÏûÖ - Ï∫êÏãú Î¨¥Ïãú ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê ÏãúÎèÑ'); // Ìä∏ÎûòÌîΩ ÏµúÏ†ÅÌôî
      
      // 500ms ÎîúÎ†àÏù¥ ÌõÑ Ï∫êÏãú Î¨¥Ïãú Î≥µÏõê ÏãúÎèÑ (Ï¥àÍ∏∞ Î°úÎî© Ï∂©Îèå Î∞©ÏßÄ)
      const timer = setTimeout(async () => {
        try {
          await cloudRestore(true); // Ï∫êÏãú Î¨¥Ïãú Î≥µÏõê
          // console.log('‚úÖ [App] ÎèÑÎ©îÏù∏ Ï≤´ ÏßÑÏûÖ ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê ÏôÑÎ£å'); // Ìä∏ÎûòÌîΩ ÏµúÏ†ÅÌôî
        } catch (error) {
          console.warn('‚ö†Ô∏è [App] ÎèÑÎ©îÏù∏ Ï≤´ ÏßÑÏûÖ ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê Ïã§Ìå®:', error);
        }
      }, 500);

      // Í∏ÄÎ°úÎ≤å Ïä§ÎßàÌä∏ ÎèôÍ∏∞Ìôî Ìä∏Î¶¨Í±∞ Ìï®Ïàò Ï∂îÍ∞Ä
      (window as any).triggerSmartSync = () => {
        console.log('üöÄ [App] Í∏ÄÎ°úÎ≤å Ïä§ÎßàÌä∏ ÎèôÍ∏∞Ìôî Ìä∏Î¶¨Í±∞');
        triggerSmartSync();
      };
      
      isInitialLoad = false;
      return () => {
        clearTimeout(timer);
        delete (window as any).triggerSmartSync;
      };
    }
  }, []); // Îπà ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ - Ï≤´ Î†åÎçîÎßÅÏóêÎßå Ïã§Ìñâ

  // Îã§Ï§ë ÏÇ¨Ïö©Ïûê Í∞êÏßÄ Ïãú Ïä§ÎÇµÎ∞î ÌëúÏãú Î∞è ÎèôÍ∏∞Ìôî Ï†ÑÎûµ
  useEffect(() => {
    if (status.hasMultipleUsers && !showUserSnackbar) {
      setShowUserSnackbar(true);
      triggerSmartSync();
    } else if (!status.hasMultipleUsers && showUserSnackbar) {
      setShowUserSnackbar(false);
    }
  }, [status.hasMultipleUsers, showUserSnackbar, triggerSmartSync]);

  // Îã§Ï§ë ÏÇ¨Ïö©Ïûê ÌôòÍ≤ΩÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω Ïãú Ï∂îÍ∞Ä ÌôïÏù∏
  const confirmDataChange = useCallback((action: string) => {
    if (status.hasMultipleUsers) {
      return window.confirm(
        `ÌòÑÏû¨ ${status.activeUserCount}Î™ÖÏù¥ ÎèôÏãú Ï†ëÏÜç Ï§ëÏûÖÎãàÎã§.\n` +
        `'${action}' ÏûëÏóÖÏùÑ Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?`
      );
    }
    return true;
  }, [status.hasMultipleUsers, status.activeUserCount]);

  // Ïã§ÏãúÍ∞Ñ ÌôúÎèô ÏïåÎ¶º ÌëúÏãú
  useEffect(() => {
    if (recentActions.length > 0 && hasMultipleUsers) {
      setShowActivitySnackbar(true);
      const timer = setTimeout(() => setShowActivitySnackbar(false), 8000);
      return () => clearTimeout(timer);
    }
  }, [recentActions.length, hasMultipleUsers]);

  const handleUpdatePhase = useCallback((phaseId: string, updates: Partial<ProjectPhase>) => {
    if (!isOnline) {
      alert('üö® Îç∞Ïù¥ÌÑ∞ Ìé∏ÏßëÏùÑ ÏúÑÌï¥ÏÑúÎäî Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    if (!confirmDataChange('ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏàòÏ†ï')) return;
    
    updateProjectData(draft => {
      const phase = draft.projectPhases.find((p: ProjectPhase) => p.id === phaseId);
      if (phase) {
        Object.assign(phase, updates);
        // ÏÇ¨Ïö©Ïûê ÌôúÎèô ÏïåÎ¶º
        notifyUserAction(`ÌîÑÎ°úÏ†ùÌä∏ Îã®Í≥Ñ '${phase.title}' ÏàòÏ†ï`);
        // ÏûêÎèô ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ
        cloudBackup(draft, { 
          backupType: 'AUTO', 
          backupSource: 'ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏàòÏ†ï'
        });
      }
    });
  }, [updateProjectData, notifyUserAction, confirmDataChange, isOnline, cloudBackup, isActive]);

  const handleAddPhase = useCallback(() => {
    if (!isOnline) {
      alert('üö® Îç∞Ïù¥ÌÑ∞ Ìé∏ÏßëÏùÑ ÏúÑÌï¥ÏÑúÎäî Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    if (!confirmDataChange('ÏÉà ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ï∂îÍ∞Ä')) return;
    
    updateProjectData(draft => {
      const newPhase: ProjectPhase = {
        id: `phase-${Date.now()}`,
        title: 'ÏÉà ÏõåÌÅ¨ÌîåÎ°úÏö∞',
        tasks: []
      };
      draft.projectPhases.push(newPhase);
      // ÏÇ¨Ïö©Ïûê ÌôúÎèô ÏïåÎ¶º
      notifyUserAction('ÏÉà ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ï∂îÍ∞Ä');
        // ÏûêÎèô ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ
        cloudBackup(draft, { 
          backupType: 'AUTO', 
          backupSource: 'ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ï∂îÍ∞Ä'
        });
    });
  }, [updateProjectData, notifyUserAction, confirmDataChange, isOnline, cloudBackup, isActive]);

  const handleDeletePhase = useCallback((phaseId: string) => {
    setPhaseToDelete(phaseId);
  }, []);

  const confirmDeletePhase = useCallback(() => {
    if (!phaseToDelete) return;
    if (!confirmDataChange('ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÇ≠Ï†ú')) {
      setPhaseToDelete(null);
      return;
    }
    
    updateProjectData(draft => {
      const phaseIndex = draft.projectPhases.findIndex((p: ProjectPhase) => p.id === phaseToDelete);
      if (phaseIndex === -1) return;
      const [removedPhase] = draft.projectPhases.splice(phaseIndex, 1);
      // ÏÇ≠Ï†úÎêú ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïù¥Î¶Ñ ÏÇ¨Ïö© (lint Í≤ΩÍ≥† Ìï¥Í≤∞)
      void removedPhase.title;
    });
    setPhaseToDelete(null);
  }, [phaseToDelete, updateProjectData, confirmDataChange]);

  const handleUpdateTask = useCallback((phaseId: string, taskId: string, updates: Partial<Task>) => {
    if (!isOnline) {
      alert('üö® Îç∞Ïù¥ÌÑ∞ Ìé∏ÏßëÏùÑ ÏúÑÌï¥ÏÑúÎäî Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    updateProjectData(draft => {
      const phase = draft.projectPhases.find((p: ProjectPhase) => p.id === phaseId);
      if (!phase) return;
      const task = phase.tasks.find((t: Task) => t.id === taskId);
      if (!task) return;
      Object.assign(task, updates);
      // ÏûêÎèô ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ
      cloudBackup(draft, { 
        backupType: 'AUTO', 
        backupSource: 'ÏûëÏóÖ ÏàòÏ†ï'
      });
    });
  }, [updateProjectData, isOnline, cloudBackup, isActive]);

  const handleAddTask = useCallback((phaseId: string) => {
    if (!isOnline) {
      alert('üö® Îç∞Ïù¥ÌÑ∞ Ìé∏ÏßëÏùÑ ÏúÑÌï¥ÏÑúÎäî Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    updateProjectData(draft => {
      const phase = draft.projectPhases.find((p: ProjectPhase) => p.id === phaseId);
      if (!phase) return;
      const newTask: Task = {
        id: `task-${Date.now()}`,
        mainTask: ['ÏÉà ÏóÖÎ¨¥'],
        personInCharge: '',
        schedule: '',
        checkpoints: [],
        performance: { date: '', docLink: '', comment: '' },
        issues: ''
      };
      phase.tasks.push(newTask);
      // ÏûêÎèô ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ
      cloudBackup(draft, { 
        backupType: 'AUTO', 
        backupSource: 'ÏûëÏóÖ Ï∂îÍ∞Ä'
      });
    });
  }, [updateProjectData, isOnline, cloudBackup, isActive]);

  const handleDeleteTask = useCallback((phaseId: string, taskId: string) => {
    setTaskToDelete({ phaseId, taskId });
  }, []);

  const confirmDeleteTask = useCallback(() => {
    if (!taskToDelete) return;
    const { phaseId, taskId } = taskToDelete;
    updateProjectData(draft => {
      const phase = draft.projectPhases.find((p: ProjectPhase) => p.id === phaseId);
      if (!phase) return;
      const taskIndex = phase.tasks.findIndex((t: Task) => t.id === taskId);
      if (taskIndex === -1) return;
      const [removedTask] = phase.tasks.splice(taskIndex, 1);
      // ÏÇ≠Ï†úÎêú ÏóÖÎ¨¥ Ïù¥Î¶Ñ ÏÇ¨Ïö© (lint Í≤ΩÍ≥† Ìï¥Í≤∞)
      void removedTask.mainTask;
    });
    setTaskToDelete(null);
  }, [taskToDelete, updateProjectData]);

  const downloadAsCSV = () => {
    try {
      // CSV Ìó§Îçî ÏÉùÏÑ± (Ï†úÍ±∞Îê®)
      // const headers = [
      //   'ÏõåÌÅ¨ÌîåÎ°úÏö∞', 'ÏóÖÎ¨¥', 'Îã¥ÎãπÏûê', 'ÏùºÏ†ï', 
      //   'ÌôïÏù∏ Ï°∞Í±¥', 'ÏôÑÎ£å Ïó¨Î∂Ä', 'Í∏∞Í∞Ñ', 
      //   'ÏûêÎ£å', 'ÌèâÍ∞Ä', 'ÎπÑÍ≥†'
      // ];

      // CSV Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ Ï†ïÏùò
      type CSVRow = {
        [key: string]: string;
        ÏõåÌÅ¨ÌîåÎ°úÏö∞: string;
        ÏóÖÎ¨¥: string;
        Îã¥ÎãπÏûê: string;
        ÏùºÏ†ï: string;
        'ÌôïÏù∏ Ï°∞Í±¥': string;
        ÏôÑÎ£åÏó¨Î∂Ä: string;
        Í∏∞Í∞Ñ: string;
        ÏûêÎ£å: string;
        ÌèâÍ∞Ä: string;
        ÎπÑÍ≥†: string;
      };

      // CSV Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      const csvData: CSVRow[] = projectData.projectPhases.flatMap(phase => 
        phase.tasks.map(task => ({
          ÏõåÌÅ¨ÌîåÎ°úÏö∞: phase.title,
          ÏóÖÎ¨¥: task.mainTask.join(', '),
          Îã¥ÎãπÏûê: task.personInCharge,
          ÏùºÏ†ï: task.schedule,
          'ÌôïÏù∏ Ï°∞Í±¥': task.checkpoints.map(cp => cp.text).join('; '),
          ÏôÑÎ£åÏó¨Î∂Ä: task.checkpoints.map(cp => cp.completed ? 'ÏôÑÎ£å' : 'ÎØ∏ÏôÑÎ£å').join('; '),
          Í∏∞Í∞Ñ: task.performance.date,
          ÏûêÎ£å: task.performance.docLink,
          ÌèâÍ∞Ä: task.performance.comment,
          ÎπÑÍ≥†: task.issues
        }))
      );

      // CSV Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
      const csvString = [
        Object.keys(csvData[0]).join(','),
        ...csvData.map(row => 
          Object.keys(row).map(header => {
            const value = row[header] || '';
            return `"${value.replace(/"/g, '""')}"`;
          }).join(',')
        )
      ].join('\n');

      // Blob Î∞è Îã§Ïö¥Î°úÎìú ÎßÅÌÅ¨ ÏÉùÏÑ±
      const blob = new Blob(['\ufeff' + csvString], { type: 'text/csv;charset=utf-8;' });
      const now = new Date();
      const year = now.getFullYear();
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const day = String(now.getDate()).padStart(2, '0');
      const fileName = `crazyshot_project_export_${year}-${month}-${day}.csv`;

      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(link.href);

      alert('ÏóëÏÖÄ ÎÇ¥Î≥¥ÎÇ¥Í∏∞Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      alert('ÏóëÏÖÄ ÎÇ¥Î≥¥ÎÇ¥Í∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };
  
  const handleBackup = async () => {
    try {
      // ÏÉàÎ°úÏö¥ Í≥†Í∏â Î∞±ÏóÖ Ìï®Ïàò ÏÇ¨Ïö©
      await advancedFileSystemBackup(projectData, {
        filePrefix: 'ÌÅ¨Î†àÏù¥ÏßÄÏÉ∑_Í∞úÎ∞úÌòÑÌô©Î∞±ÏóÖ',
        onSuccess: (fileName) => {
          // Ï∂îÍ∞Ä ÏÑ±Í≥µ Ï≤òÎ¶¨ Î°úÏßÅ (ÏòµÏÖò)
          console.log(`Í∞úÎ∞úÌòÑÌô© Î∞±ÏóÖ ÏôÑÎ£å: ${fileName}`);
        },
        onError: (error) => {
          // Ï∂îÍ∞Ä Ïò§Î•ò Ï≤òÎ¶¨ Î°úÏßÅ (ÏòµÏÖò)
          console.error('Í∞úÎ∞úÌòÑÌô© Î∞±ÏóÖ Ï§ë Ïò§Î•ò:', error);
        }
      });
    } catch (error) {
      console.error('Î∞±ÏóÖ Ï§ë ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•ò:', error);
    }
  };

  const handleCloudBackup = async () => {
    if (!isOnline) {
      alert('üö® ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖÏùÑ ÏúÑÌï¥ÏÑúÎäî Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    try {
      console.log('üöÄ [App] ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ ÏãúÏûë');
      // Î∞±ÏóÖ Î°úÍ∑∏ ÏÉùÏÑ± (ÎàÑÏ†Å Î≥¥Ï°¥)
      const backupLog = {
        timestamp: new Date().toLocaleString('ko-KR'),
        message: 'ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ Ïã§Ìñâ',
        version: `backup-${Date.now()}`
      };

      // Í∏∞Ï°¥ Î°úÍ∑∏ÏôÄ ÏÉà Î°úÍ∑∏Î•º Î™®Îëê Î≥¥Ï°¥ÌïòÎäî ÎàÑÏ†Å Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      const updatedProjectData = {
        ...projectData,
        logs: [
          ...projectData.logs, 
          backupLog
        ]
      };

      // ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ Ïã§Ìñâ (ÎàÑÏ†Å Î≥¥Ï°¥ Î™®Îìú)
      await cloudBackup(updatedProjectData, {
        backupType: 'MANUAL',
        backupSource: 'ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ Î≤ÑÌäº'
      });
      
      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      updateProjectData(() => updatedProjectData);
      
      console.log('‚úÖ [App] ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ ÏôÑÎ£å');
      alert('ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('‚ùå [App] ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ Ï§ë Ïò§Î•ò:', error);
      alert('ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleCloudRestore = async () => {
    if (!isOnline) {
      alert('üö® ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõêÏùÑ ÏúÑÌï¥ÏÑúÎäî Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    try {
      console.log('üöÄ [App] ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê ÏãúÏûë');
      const restoredData = await cloudRestore();
      if (restoredData) {
        // Î™®Îì† Î°úÍ∑∏ ÎàÑÏ†Å Î≥¥Ï°¥ (Í∏∞Ï°¥ + Î≥µÏõê + Î≥µÏõê Î°úÍ∑∏)
        const restoredDataWithLog = {
          ...restoredData,
          logs: [
            ...(projectData.logs || []),
            ...(restoredData.logs || []),
            {
              timestamp: getTimestamp(),
              message: 'ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖÏóêÏÑú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥µÏõêÎêòÏóàÏäµÎãàÎã§.',
              version: currentVersion
            }
          ]
        };

        updateProjectData(draft => {
          Object.assign(draft, restoredDataWithLog);
        });

        console.log('‚úÖ [App] ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê ÏôÑÎ£å');
        alert('ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥µÏõêÌñàÏäµÎãàÎã§.');
      } else {
        console.log('üì≠ [App] ÌÅ¥ÎùºÏö∞ÎìúÏóê Î≥µÏõêÌï† Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå');
        alert('ÌÅ¥ÎùºÏö∞ÎìúÏóê Ï†ÄÏû•Îêú Î∞±ÏóÖ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('‚ùå [App] ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê Ï§ë Ïò§Î•ò:', error);
      alert('ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Î≥µÏõêÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
    }
  };

  const handleRestoreClick = () => {
    fileInputRef.current?.click();
  };

  const sanitizeAndUpgradeData = (parsedJson: any): ProjectData => {

    let rawPhases: any[];
    let rawLogs: any[] = [];

    // More flexible parsing logic
    if (parsedJson && typeof parsedJson === 'object') {
      if (Array.isArray(parsedJson)) {
        rawPhases = parsedJson;
      } else if (Array.isArray(parsedJson.projectPhases)) {
        rawPhases = parsedJson.projectPhases;
        rawLogs = Array.isArray(parsedJson.logs) ? parsedJson.logs : [];
      } else {
        throw new Error("ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Î∞±ÏóÖ ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§. ÌååÏùº Íµ¨Ï°∞Í∞Ä ÏÜêÏÉÅÎêòÏóàÏùÑ Ïàò ÏûàÏäµÎãàÎã§.");
      }
    } else {
      throw new Error("ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Î∞±ÏóÖ ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§. ÌååÏùº Íµ¨Ï°∞Í∞Ä ÏÜêÏÉÅÎêòÏóàÏùÑ Ïàò ÏûàÏäµÎãàÎã§.");
    }

    const sanitizedPhases: ProjectPhase[] = rawPhases.map((phase: any, phaseIndex: number) => {
      const sanitizedTasks: Task[] = (Array.isArray(phase.tasks) ? phase.tasks : []).map((task: any, taskIndex: number) => {
        const sanitizedCheckpoints: ChecklistItem[] = (Array.isArray(task.checkpoints) ? task.checkpoints : []).map((cp: any, cpIndex: number) => ({
          id: cp.id || `cp-restored-${Date.now()}-${cpIndex}`,
          text: typeof cp.text === 'string' ? cp.text : 'Ìï≠Î™© ÏóÜÏùå',
          completed: typeof cp.completed === 'boolean' ? cp.completed : false,
        }));
        const performance: PerformanceRecord = (task.performance && typeof task.performance === 'object')
          ? { 
              date: typeof task.performance.date === 'string' ? task.performance.date : '', 
              docLink: typeof task.performance.docLink === 'string' ? task.performance.docLink : '', 
              comment: typeof task.performance.comment === 'string' ? task.performance.comment : '' 
            }
          : { date: '', docLink: '', comment: '' };
        return {
          id: task.id || `task-restored-${Date.now()}-${taskIndex}`,
          mainTask: Array.isArray(task.mainTask) ? task.mainTask.map(String) : (typeof task.mainTask === 'string' ? [task.mainTask] : ['ÏóÖÎ¨¥ ÏóÜÏùå']),
          personInCharge: typeof task.personInCharge === 'string' ? task.personInCharge : '',
          schedule: typeof task.schedule === 'string' ? task.schedule : '',
          checkpoints: sanitizedCheckpoints,
          performance: performance,
          issues: typeof task.issues === 'string' ? task.issues : '',
        };
      });
      return {
        id: phase.id || `phase-restored-${Date.now()}-${phaseIndex}`,
        title: typeof phase.title === 'string' ? phase.title : 'Ï†úÎ™© ÏóÜÏùå',
        tasks: sanitizedTasks,
      };
    });

    return { projectPhases: sanitizedPhases, logs: rawLogs };
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    if (!file.name.toLowerCase().endsWith('.json')) {
      alert('ÏûòÎ™ªÎêú ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§. JSON ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      if (fileInputRef.current) fileInputRef.current.value = '';
      return;
    }
    const reader = new FileReader();
    reader.onerror = () => {
      alert('ÌååÏùºÏùÑ ÏùΩÎäî ÎèÑÏ§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      if (fileInputRef.current) fileInputRef.current.value = '';
    };
    reader.onload = (e) => {
      try {
        const text = e.target?.result as string;
        if (!text) {
          throw new Error('ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÍ±∞ÎÇò ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        }
        const parsedJson = JSON.parse(text);
        const dataToRestoreFromFile = sanitizeAndUpgradeData(parsedJson);
        setDataToRestore(dataToRestoreFromFile);
      } catch (error) {
        alert(`ÌååÏùºÏùÑ Î≥µÏõêÌïòÎäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
      } finally {
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
      }
    };
    reader.readAsText(file);
  };

  const confirmRestore = useCallback(() => {
    if (!isOnline) {
      alert('üö® Îç∞Ïù¥ÌÑ∞ Î≥µÏõêÏùÑ ÏúÑÌï¥ÏÑúÎäî Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    if (!dataToRestore) {
      return;
    }
    try {
      // ÌååÏùº Î≥µÏõê ÏãúÏóêÎèÑ Í∏∞Ï°¥ Î°úÍ∑∏ ÎàÑÏ†Å Î≥¥Ï°¥
      const restoredDataWithLog = {
        ...dataToRestore,
        logs: [
          ...(projectData.logs || []),
          ...dataToRestore.logs,
          {
            timestamp: getTimestamp(),
            message: 'Îç∞Ïù¥ÌÑ∞Í∞Ä Î∞±ÏóÖ ÌååÏùºÎ°úÎ∂ÄÌÑ∞ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥µÏõêÎêòÏóàÏäµÎãàÎã§.',
            version: currentVersion
          }
        ]
      };
      
      // Ïò¨Î∞îÎ•∏ Î∞©ÏãùÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê
      updateProjectData(draft => {
        Object.assign(draft, restoredDataWithLog);
      });
      
      // Ï¶âÏãú ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖÏúºÎ°ú Îã§Î•∏ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÎèôÍ∏∞Ìôî
      setTimeout(async () => {
        try {
          await cloudBackup(restoredDataWithLog);
          console.log('‚úÖ [App] ÌååÏùº Î≥µÏõê ÌõÑ ÌÅ¥ÎùºÏö∞Îìú ÎèôÍ∏∞Ìôî ÏôÑÎ£å');
        } catch (backupError) {
          console.warn('‚ö†Ô∏è [App] ÌååÏùº Î≥µÏõê ÌõÑ ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ Ïã§Ìå®:', backupError);
        }
      }, 100); // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ Ïã§Ìñâ
      
      // ÏÉÅÌÉú ÎèôÍ∏∞ÌôîÎ•º ÏúÑÌïú storage Ïù¥Î≤§Ìä∏ Ìä∏Î¶¨Í±∞ (Ïû•ÎπÑÌòÑÌô©Í≥º ÎèôÏùºÌïú Ìå®ÌÑ¥)
      window.dispatchEvent(new Event('storage'));
      
      setDataToRestore(null);
      alert('Îç∞Ïù¥ÌÑ∞ Î≥µÏõêÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      alert(`Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
    }
  }, [dataToRestore, updateProjectData, getTimestamp, isOnline, projectData.logs, currentVersion]);

  const cancelRestore = useCallback(() => {
    setDataToRestore(null);
    alert('Î≥µÏõê ÏûëÏóÖÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.');
  }, []);

  // Í∞úÎ∞úÏö© Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Ï¥àÍ∏∞Ìôî Ìï®Ïàò Ï†úÍ±∞Îê®

  // Í∞úÎ∞úÏö© ÏÉÅÌÉú ÌôïÏù∏ Ìï®Ïàò Ï†úÍ±∞Îê®

  return (
    <>
      {/* Îã§Ï§ë ÏÇ¨Ïö©Ïûê Í∞ïÌôîÎêú Í≤ΩÍ≥† Ïä§ÎÇµÎ∞î */}
      <TopSnackbar
        isVisible={showUserSnackbar}
        message={`${status.activeUserCount}Î™Ö ÎèôÏãú ÏÇ¨Ïö©Ïûê ÌôïÏù∏`}
        type="warning"
        onClose={() => setShowUserSnackbar(false)}
      />
      
      {/* Ïã§ÏãúÍ∞Ñ ÌôúÎèô ÏïåÎ¶º Ïä§ÎÇµÎ∞î */}
      <BottomSnackbar
        isVisible={showActivitySnackbar}
        messages={recentActions}
        onClose={() => setShowActivitySnackbar(false)}
      />
      
      <div className="flex flex-col h-screen bg-slate-100 text-crazy-dark-gray">
        <header className="flex-shrink-0 bg-white shadow-md z-10">
            <div className="container mx-auto px-4 sm:px-8">
                <div className="flex items-center justify-between pt-4 pb-2">
                    <div className="flex items-center gap-3">
                        <CrazyshotLogo className="h-8 sm:h-10 text-crazy-red" />
                        <h1 className="text-xl sm:text-3xl font-bold text-crazy-dark-blue">
                            ÌÅ¨Î†àÏù¥ÏßÄÏÉ∑ ÎåÄÏãúÎ≥¥Îìú
                        </h1>
                    </div>
                </div>
                
                <div className="border-b border-slate-200 -mx-4 sm:-mx-8 px-4 sm:px-8">
                    <nav className="flex items-center justify-between" aria-label="Tabs">
                        <div className="flex">
                            <TabButton tabId="workflow" title="Í∞úÎ∞ú ÌòÑÌô©" activeTab={activeTab} setActiveTab={handleTabChange} />
                            <TabButton tabId="dashboard" title="Ïû•ÎπÑ ÌòÑÌô©" activeTab={activeTab} setActiveTab={handleTabChange} />
                        </div>
                        <div className="flex items-center space-x-2">
                            <div className={`h-2 w-2 rounded-full ${isOnline ? 'bg-green-500' : 'bg-red-500'}`}></div>
                            <span className="text-xs text-gray-600">
                                {isOnline ? 'Ïò®ÎùºÏù∏' : 'Ïò§ÌîÑÎùºÏù∏'}
                            </span>
                            {backupState.pendingBackups.length > 0 && (
                                <div className="h-2 w-2 rounded-full bg-orange-500 animate-pulse"></div>
                            )}
                        </div>
                    </nav>
                </div>
            </div>
        </header>

        <main className="flex-grow">
            <div className="container mx-auto p-4 sm:p-8">
                {activeTab === 'workflow' && (
                  <div className="space-y-8 overflow-y-auto max-h-[calc(100vh-12rem)]">
                    <header>
                        <p className="text-crazy-gray mb-4">
                            Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌîÑÎ°úÏ†ùÌä∏ Í∞Å Î∂ÑÏïº Î≥Ñ ÏóÖÎ¨¥ÌòÑÌô©ÏùÑ Í∏∞Î°ùÌïòÍ≥† Í≥µÏú†ÌïòÏÑ∏Ïöî.
                        </p>
                         <div className="bg-white border border-slate-200 rounded-lg p-4 mb-4 shadow-sm">
                             <div className="flex items-center gap-2">
                                 {shouldShowCloudButtons && (
                                   <>
                                     <button onClick={handleCloudBackup} className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-crazy-blue bg-white border border-crazy-blue rounded-lg shadow-md hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-crazy-blue transition-colors">
                                         <CloudUploadIcon className="w-4 h-4" /> Î°úÏª¨ Î∞±ÏóÖ
                                     </button>
                                     <button onClick={handleCloudRestore} className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-crazy-blue bg-white border border-crazy-blue rounded-lg shadow-md hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-crazy-blue transition-colors">
                                         <CloudDownloadIcon className="w-4 h-4" /> Î°úÏª¨ Î≥µÏõê
                                     </button>
                                   </>
                                 )}
                                 <div className="text-xs text-gray-500 ml-2">
                                   {(() => {
                                     const latestLog = projectData.logs[projectData.logs.length - 1];
                                     const displayVersion = latestLog?.version || currentVersion;
                                     return displayVersion ? (
                                       <span title={displayVersion}>
                                         Î≤ÑÏ†Ñ: {displayVersion.slice(-8)}
                                       </span>
                                     ) : null;
                                   })()}
                                 </div>
                                 <button onClick={downloadAsCSV} className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-crazy-blue rounded-lg shadow-md hover:bg-crazy-bright-blue focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-crazy-bright-blue transition-colors">
                                    <DownloadIcon className="w-4 h-4" /> ÏóëÏÖÄ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
                                </button>
                                 <button onClick={handleBackup} className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-crazy-blue bg-white border border-crazy-blue rounded-lg shadow-md hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-crazy-blue transition-colors">
                                     <SaveIcon className="w-4 h-4" /> ÌååÏùº Î∞±ÏóÖ
                                 </button>
                                 <input type="file" ref={fileInputRef} onChange={handleFileChange} accept=".json" className="hidden" />
                                 <button onClick={handleRestoreClick} className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-crazy-blue bg-white border border-crazy-blue rounded-lg shadow-md hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-crazy-blue transition-colors">
                                     <UploadIcon className="w-4 h-4" /> ÌååÏùº Î≥µÏõê
                                 </button>
                                {isSyncing ? (
                                    <span className="ml-2 text-xs text-blue-600">üîÑ Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ï§ë...</span>
                                ) : isAutoSyncWorking && (
                                    <span className="ml-2 text-xs text-green-600">‚úì ÏûêÎèô Î≥µÏõê ÎèôÍ∏∞Ìôî ÌôúÏÑ±</span>
                                )}
                            </div>
                        </div>
                        
                        <div className="mt-4">
                            <div className="flex justify-between items-center mb-1">
                                <span className="text-sm font-semibold text-crazy-dark-blue">Ï†ÑÏ≤¥ ÏßÑÌñâÎ•†</span>
                                <span className="text-sm font-bold text-crazy-blue">{totalProgress}%</span>
                            </div>
                            <div className="w-full bg-slate-200 rounded-full h-3">
                                <div className="bg-crazy-blue h-3 rounded-full transition-all duration-500" style={{ width: `${totalProgress}%` }}></div>
                            </div>
                        </div>
                        <ChangeLogDisplay logs={projectData.logs} onShowMore={() => setIsLogModalOpen(true)} />
                    </header>

                    {projectData.projectPhases.map(phase => (
                      <ProjectPhaseCard key={phase.id} phase={phase} onUpdateTask={handleUpdateTask} onAddTask={handleAddTask} onDeleteTask={handleDeleteTask} onUpdatePhase={handleUpdatePhase} onDeletePhase={handleDeletePhase} />
                    ))}
                    <div className="pt-4">
                        <button onClick={handleAddPhase} className="flex w-full items-center justify-center gap-2 px-4 py-3 text-base font-semibold text-crazy-blue bg-white border-2 border-dashed border-slate-300 rounded-lg hover:border-crazy-blue hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-crazy-blue transition-colors">
                            <PlusIcon className="w-5 h-5" /> ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ï∂îÍ∞Ä
                        </button>
                    </div>
                  </div>
                )}
                
                {activeTab === 'dashboard' && (
                    <ProductDashboard />
                )}
            </div>
        </main>
      </div>
      
      <ConfirmationModal isOpen={!!taskToDelete} title="ÏÇ≠Ï†ú ÌôïÏù∏" onCancel={() => setTaskToDelete(null)} onConfirm={confirmDeleteTask}>
        <p>Ï†ïÎßêÎ°ú Ïù¥ ÏóÖÎ¨¥Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.</p>
      </ConfirmationModal>
      <ConfirmationModal isOpen={!!phaseToDelete} title="ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÇ≠Ï†ú ÌôïÏù∏" onCancel={() => setPhaseToDelete(null)} onConfirm={confirmDeletePhase}>
        <p>Ï†ïÎßêÎ°ú Ïù¥ ÏõåÌÅ¨ÌîåÎ°úÏö∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ìè¨Ìï®Îêú Î™®Îì† ÏóÖÎ¨¥Í∞Ä Ìï®Íªò ÏÇ≠Ï†úÎêòÎ©∞, Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.</p>
      </ConfirmationModal>
      <ConfirmationModal isOpen={!!dataToRestore} title="Ï†ïÎ≥¥ Î≥µÏõê ÌôïÏù∏" onCancel={cancelRestore} onConfirm={confirmRestore}>
        <p>ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞Î•º ÎçÆÏñ¥Ïì∞Í≥† Î∞±ÏóÖ ÌååÏùºÎ°úÎ∂ÄÌÑ∞ Î≥µÏõêÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.</p>
      </ConfirmationModal>
      <LogModal isOpen={isLogModalOpen} onClose={() => setIsLogModalOpen(false)} logs={projectData.logs} />
    </>
  );
};

export default App;